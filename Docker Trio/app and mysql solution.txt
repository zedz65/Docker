STEPS...

Sql using my app

1. clone your project from git

2. go into directory

3. install python
sudo apt install python3

4.sudo apt-get install python3-pip

5. sudo pip3 install virtualenv 
virtualenv -p python3 venv
source venv/bin/activate

6.pip install -r requirements.txt


----------------------------------------------------------------
--DOCKERFILE--

Docker file in directory	|	vim Dockerfile

FROM python:3.7
WORKDIR /application
COPY ./requirements.txt .
RUN pip install -r requirements.txt
COPY . .
ENTRYPOINT ["/usr/local/bin/python", "app.py"]

----------------------------------------------------------------
--SQL CONTAINER--

TODO IN SQL CONTAINER:
docker exec -it mysql bash 	|     after mysql is running  - -  GOES INTO SQL CONTAINER

mysql -u root -p :LOGIN

CREATE THE DATABASE THAT YOU NAMED:
create database flask

use it USE flask:

----------------------------------------------------------------
--PYTHON CREATE.PY--
THEN RUN python3 create.py

----------------------------------------------------------------
--BUILD IMAGE FROM DOCKERFILE--

next step build image.
docker build -t "image name" . 	|	docker build -t flaskapp .

if successfull will show: 
Successfully built 8bbaeff4f65c
Successfully tagged flaskapp:latest

to check if image is there type:
docker images

DISPLAYS:
(venv) zedz65@docker:~/myproject$ docker images
REPOSITORY                          TAG                 IMAGE ID            CREATED              SIZE
flaskapp                            latest              8bbaeff4f65c        About a minute ago   971MB


---------------------------------------------------------------
--DOCKER NETWORK--

Next Step Create network:
command : 
docker network create "network name"
docker network create flaskapp

DISPLAYS:
(venv) zedz65@docker:~/myproject$ docker network create flaskapp
2ecede83a40709354c6da449d81bed925e6ede3cb9644168f56e370b077468b5

here we put both containers in so they can communicate with each other
sql and flask


----------------------------------------------------------------
--SQL CONTAINER ATTATCHED--

COMMAND ATTATCHING CONTAINERS
docker run -d -p 3306:3306 --network flaskapp -e MYSQL_ROOT_PASSWORD=zahid65 -e MYSQLDATABASE=flask -v sqlflask:/var/lib/mysql --name mysql mysql:5.7

BREAKDOWN:
docker run -d -p 3306:3306 --network flaskapp -e MYSQL_ROOT_PASSWORD=zahid65 -e MYSQLDATABASE=flask -v sqlflask:/var/lib/mysql --name mysql mysql:5.7
			ATTATCHED NETWORK	MYSQL ROOT PASSWORD		DATABASENAME	    ATTATCHED VOLUME AND MOUNTED TO VAR/LIB/MYSQL(sqlflask is volume name)
														:/var/lib/mysql is where sql container keeps all your data(google)
														data will be stored in this Volume so can use later in new containers

to check container is present.
docker ps

DISPLAY:
(venv) zedz65@docker:~/myproject$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES
b6ab880b8396        mysql:5.7           "docker-entrypoint.s…"   14 minutes ago      Up 14 minutes       0.0.0.0:3306->3306/tcp, 33060/tcp   mysql

-----------------------------------------------------------------
--FLASK APP CONTAINER ATTATCHED--

COMMAND TO ADD THE FLASK APP CONTAINER:
docker run -d -p 5000:3306 --network flaskapp -e DATABASE_URI=mysql+pymysql://root:zahid65@mysql:3306/flask -e SECRET_KEY=ABC123 --name flaskapp flaskapp
										refers directly to container as they share the same network
										when using computer locally you leave this as is but export localhost:3306

DISPLAY:
(venv) zedz65@docker:~/myproject$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS     
                          NAMES
67d15a8c479f        flaskapp            "/usr/local/bin/pyth…"   10 seconds ago      Up 9 seconds        0.0.0.0:50
00->5000/tcp              flaskapp
b6ab880b8396        mysql:5.7           "docker-entrypoint.s…"   2 hours ago         Up 2 hours          0.0.0.0:33

both are running here.

----------------------------------------------------------------

**if problems check logs


***you can remove sql container and then re add it will include the data from volume


----------------------------------------------------------------
--CLEAN-UP REMOVING EVERYTHING--

removing everything:
docker stop mysql = stop it first
docker rm mysql = remove the container

or docker stop $(docker ps -qa)
stop all

docker rm $(docker ps -qa)
remove all

docker system prune -f --volumes
remove all volumes

docker rmi flaskapp = removes image

------------------------------------------------------------------
TASK COMPLETE. RUN YOUR APP AND SQL IN 2 CONTAINERS ON A NETWORK.
------------------------------------------------------------------


--ERRORS FACED--

ERROR LOG
(venv) zedz65@docker:~/myproject$ docker logs flaskapp
 * Serving Flask app "application" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
/usr/local/lib/python3.7/site-packages/flask_sqlalchemy/__init__.py:835: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the futu
re.  Set it to True or False to suppress this warning.
  'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '
 * Running on http://0.0.0.0:3306/ (Press CTRL+C to quit)
 * Restarting with stat
/usr/local/lib/python3.7/site-packages/flask_sqlalchemy/__init__.py:835: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the futu
re.  Set it to True or False to suppress this warning.
  'SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and '
 * Debugger is active!
 * Debugger PIN: 184-238-265




--------------------------
--SOLUTION--
RUNNING ON PORT 3306 INSTEAD OF 5000. NOT SURE WHY?

Solution was to map the port to 3306 instead of 5000. solution below
							^^^^
(venv) zedz65@docker:~/myproject$ docker run -d -p 5000:3306 --network flaskapp -e DATABASE_URI=mysql+pymysql://root:zahid65@mysql:3306/flask -e SECRET_KEY=ABC123 --name flaskapp flaskapp
654309370c819d4040c9b62a88de2de9f331b60906916a2dd3c0eac2e7cf80a4

--------------------------

